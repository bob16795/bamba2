def std: import "std/std.bam";

def tmp: ${i32(0), i32(1), i32(4), i32(3), i32(4)};
def SliceT: std.Types.Slice(i32);

def printf: extfn -> Void;

def printSlice: fn slice[*SliceT] -> Void {
    def i: new usize = usize(0);

    while (*i < *slice.len) {
        def tmp: slice[*i];

        printf("%d ", *tmp);
    
        i = *i + usize(1);
    }

    printf("\n", *tmp);
   
    return;
};

fdef main: fn -> i32 {
    def data: new i32[5] = tmp;
    def slice: new SliceT = SliceT.initFrom(data, usize(5));
    def range: std.Types.Range.init(usize(2), usize(5));
    def subSlice: new SliceT = slice.cut(range);

    printSlice(slice);
    printSlice(subSlice);

    return i32(0);
};
